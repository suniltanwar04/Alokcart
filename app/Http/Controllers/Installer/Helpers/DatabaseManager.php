<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.1   |
    |              on 2020-07-14 08:37:20              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\155\x69\x67\x72\141\x74\x65", ["\x2d\55\x66\157\x72\x63\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\162\x6f\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\x62\72\x73\145\145\144", ["\55\x2d\146\x6f\x72\143\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\x72\x72\157\x72", $outputLog); } return $this->response(trans("\x69\x6e\x73\x74\x61\x6c\x6c\145\162\x5f\x6d\x65\x73\x73\141\x67\x65\x73\x2e\146\x69\x6e\141\154\x2e\146\x69\156\151\x73\x68\x65\144"), "\163\x75\143\143\x65\x73\163", $outputLog); } public function seedDemoData() { ini_set("\155\x61\x78\137\x65\170\145\143\165\164\151\157\x6e\x5f\x74\x69\155\x65", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\x69\x6e\x63\145\166\x69\x6f\72\144\x65\155\157"); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\162", $outputLog); } return $this->response(trans("\151\x6e\x73\164\141\154\154\145\162\x5f\x6d\x65\163\163\141\147\145\x73\56\x66\151\156\141\154\x2e\146\151\x6e\x69\163\150\145\144"), "\x73\165\143\143\x65\x73\163", $outputLog); } private function response($message, $status = "\144\141\156\147\145\162", $outputLog) { return ["\x73\x74\141\x74\165\163" => $status, "\x6d\x65\x73\163\x61\x67\145" => $message, "\x64\x62\117\x75\164\160\165\164\114\157\147" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto vRsHe; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto krw6_; } touch($database); DB::reconnect(Config::get("\x64\x61\x74\141\142\x61\x73\x65\56\x64\x65\146\141\165\x6c\x74")); krw6_: $outputLog->write("\x55\163\151\x6e\147\x20\x53\161\154\x4c\151\x74\145\40\144\141\x74\141\142\141\163\145\x3a\x20" . $database, 1); vRsHe: } }
